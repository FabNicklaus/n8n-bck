{"createdAt":"2025-02-12T00:58:10.726Z","updatedAt":"2025-02-12T01:29:23.000Z","id":"jM5FKTxDA9PEjLJD","name":"Generate n8n Forms from Airtable and BaseRow Tables","active":false,"nodes":[{"parameters":{"resource":"base","operation":"getSchema","base":{"__rl":true,"mode":"id","value":"={{ $json.BaseId }}"}},"id":"dfd30829-fdf9-4af5-8ef7-8f12e419a1d5","name":"Get Base Schema","type":"n8n-nodes-base.airtable","position":[1100,380],"typeVersion":2.1},{"parameters":{"formTitle":"Airtable to n8n Form","formDescription":"This workflow creates an n8n form for an Airtable base.","formFields":{"values":[{"fieldLabel":"BaseId","fieldType":"dropdown","fieldOptions":{"values":[{"option":"appfP15Xd0aVZR9xV"}]},"requiredField":true},{"fieldLabel":"TableId","fieldType":"dropdown","fieldOptions":{"values":[{"option":"tblBuJjQmTZL0MI8U"}]},"requiredField":true}]},"options":{"path":"airtable-n8n-form","ignoreBots":true}},"id":"230a9931-b3bd-4271-abd3-79966be2ea1d","name":"On form submission","type":"n8n-nodes-base.formTrigger","position":[760,380],"webhookId":"a6daabfe-5507-4ac1-9345-45a59ba67630","typeVersion":2.2},{"parameters":{"conditions":{"options":{"version":2,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"72309d3f-cd52-4bfa-8b29-df0795e38d7f","operator":{"type":"string","operation":"exists","singleValue":true},"leftValue":"={{ $json.fieldType }}","rightValue":""}]},"options":{}},"id":"7eca54fe-8dde-42d6-876d-f58fcf0181f3","name":"Filter Unsupported FieldTypes","type":"n8n-nodes-base.filter","position":[1900,380],"typeVersion":2.2},{"parameters":{"aggregate":"aggregateAllItemData","options":{}},"id":"449af1d2-4cc5-4cd1-be69-c5d8e42786b6","name":"Combine Fields","type":"n8n-nodes-base.aggregate","position":[2080,380],"typeVersion":1},{"parameters":{"defineForm":"json","jsonOutput":"={{ $json.data }}","options":{}},"id":"9ae2c227-0b67-4cb2-ab2f-4765d5073b4c","name":"Render Form","type":"n8n-nodes-base.form","position":[2480,380],"webhookId":"86e5d6db-20ee-4df5-b37a-38ac85e16b7d","typeVersion":1},{"parameters":{"jsCode":"let results = [];\n\nconst fileInputs = $('Combine Fields').first().json.data.filter(item => item.fieldType === 'file');\n\nif (!fileInputs.length) return [];\n\nconst { json, binary } = $('Render Form').first();\n\nfor (fileInput of fileInputs) {\n  const binaryKeys = Object.keys(binary).filter(key => key.startsWith(fileInput.fieldLabel));\n  for (key of binaryKeys) {\n    results.push({\n      json: { fieldLabel: fileInput.fieldLabel },\n      binary: {\n          data: binary[key],\n      }\n    });\n  }\n}\n\nreturn results;"},"id":"c17a4904-cede-42b0-9d9e-9b7fae38b23a","name":"Files To List","type":"n8n-nodes-base.code","position":[3840,380],"typeVersion":2},{"parameters":{"fieldToSplitOut":"fields","options":{}},"id":"361cf135-f0bc-4c52-8eb5-01fe85c01b0f","name":"Fields to List","type":"n8n-nodes-base.splitOut","position":[1460,380],"typeVersion":1},{"parameters":{"mode":"runOnceForEachItem","jsCode":"function createField (\n  label = '',\n  type = '',\n  options = {},\n) {\n  return {\n    fieldLabel: label,\n    fieldType: type,\n    formatDate: options.formatDate,\n    fieldOptions: options.choices ?  { values: options.choices } : undefined,\n    requiredField: options.isRequired || true,\n    placeholder: options.placeholder,\n    multiselect: options.isMultipleSelect,\n    multipleFiles: options.isMultipleFiles,\n    acceptFileTypes: options.acceptFileType,\n  }\n};\n\n\nconst { type, name, options } = $input.item.json;\nlet field = null;\n\nswitch (type) {\n  case 'singleLineText':\n  case 'phoneNumber':\n  case 'url': {\n    field = createField(name, 'text');\n    break;\n  }\n  case 'multilineText': {\n    field = createField(name, 'textarea');\n    break;\n  }\n  case 'number': {\n    field = createField(name, 'number');\n    break;\n  }\n  case 'email': {\n    field = createField(name, 'email');\n    break;\n  }\n  case 'dateTime': {\n    field = createField(name, 'date', {\n      formatDate: `yyyy-MM-dd HH:mm`\n    });\n    break;\n  }\n  case 'singleSelect':\n  case 'multipleSelects': {\n    field = createField(name, 'dropdown', {\n      choices: options.choices.map(choice => ({ option: choice.name })),\n      isMultipleSelect: type === 'multipleSelects'\n    });\n    break;\n  }\n  case 'checkbox': {\n    field = createField(name, 'dropdown', {\n      choices: [{ 'option': name }],\n      isMultipleSelect: true\n    });\n    break;\n  }\n  case 'multipleAttachments': {\n    field = createField(name, 'file', {\n      isMultipleFiles: true,\n    });\n    break;\n  }\n  default:\n}\n\nreturn { json: field || {} }"},"id":"044d9fad-176b-4076-8b0f-ebccfffa7993","name":"Covert to n8n Form Fields","type":"n8n-nodes-base.code","position":[1720,380],"typeVersion":2},{"parameters":{"conditions":{"options":{"version":2,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"d74b2ca6-da27-4f84-9e2c-6c1353921df9","operator":{"name":"filter.operator.equals","type":"string","operation":"equals"},"leftValue":"={{ $json.id }}","rightValue":"={{ $('On form submission').item.json.TableId }}"}]},"options":{}},"id":"af8e264a-7f2b-432d-af2a-63f76a09c19a","name":"Filter Table","type":"n8n-nodes-base.filter","position":[1280,380],"typeVersion":2.2},{"parameters":{"url":"=https://api.baserow.io/api/database/fields/table/{{ $json.TableId }}/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"id":"97fae6ee-1756-403d-a154-4d95add27ab0","name":"Baserow List Fields","type":"n8n-nodes-base.httpRequest","position":[1100,680],"typeVersion":4.2},{"parameters":{"mode":"runOnceForEachItem","jsCode":"function createField (\n  label = '',\n  type = '',\n  options = {},\n) {\n  return {\n    fieldLabel: label,\n    fieldType: type,\n    formatDate: options.formatDate,\n    fieldOptions: options.choices ?  { values: options.choices } : undefined,\n    requiredField: options.isRequired || true,\n    placeholder: options.placeholder,\n    multiselect: options.isMultipleSelect,\n    multipleFiles: options.isMultipleFiles,\n    acceptFileTypes: options.acceptFileType,\n  }\n};\n\n\nconst { type, name, select_options } = $input.item.json;\nlet field = null;\n\nswitch (type) {\n  case 'text':\n  case 'phone_number':\n  case 'url': {\n    field = createField(name, 'text');\n    break;\n  }\n  case 'long_text': {\n    field = createField(name, 'textarea');\n    break;\n  }\n  case 'number': {\n    field = createField(name, 'number');\n    break;\n  }\n  case 'email': {\n    field = createField(name, 'email');\n    break;\n  }\n  case 'date': {\n    field = createField(name, 'date', {\n      formatDate: `yyyy-MM-dd HH:mm`\n    });\n    break;\n  }\n  case 'single_select':\n  case 'multiple_select': {\n    field = createField(name, 'dropdown', {\n      choices: select_options.map(choice => ({\n        option: choice.value\n      })),\n      isMultipleSelect: type === 'multiple_select'\n    });\n    break;\n  }\n  case 'boolean': {\n    field = createField(name, 'dropdown', {\n      choices: [{ 'option': name }],\n      isMultipleSelect: true\n    });\n    break;\n  }\n  case 'file': {\n    field = createField(name, 'file', {\n      isMultipleFiles: true,\n    });\n    break;\n  }\n  default:\n}\n\nreturn { json: field || {} }"},"id":"9749edd5-8e64-4336-abb1-9b1a83d72d76","name":"Covert to n8n Form Fields1","type":"n8n-nodes-base.code","position":[1720,680],"typeVersion":2},{"parameters":{"aggregate":"aggregateAllItemData","options":{}},"id":"dd010817-f080-4f98-8df7-c1124e0f07ac","name":"Combine Fields1","type":"n8n-nodes-base.aggregate","position":[2080,680],"typeVersion":1},{"parameters":{"conditions":{"options":{"version":2,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"72309d3f-cd52-4bfa-8b29-df0795e38d7f","operator":{"type":"string","operation":"exists","singleValue":true},"leftValue":"={{ $json.fieldType }}","rightValue":""}]},"options":{}},"id":"9aded479-9b46-4eea-b9d2-1885a367a9d1","name":"Filter Unsupported FieldTypes1","type":"n8n-nodes-base.filter","position":[1900,680],"typeVersion":2.2},{"parameters":{"defineForm":"json","jsonOutput":"={{ $json.data }}","options":{}},"id":"31b1823b-8721-447a-9652-fbb2b120bfc4","name":"Render Form1","type":"n8n-nodes-base.form","position":[2480,680],"webhookId":"86e5d6db-20ee-4df5-b37a-38ac85e16b7d","typeVersion":1},{"parameters":{"method":"POST","url":"=https://api.baserow.io/api/database/rows/table/{{ $('On form submission1').first().json.TableId }}/?user_field_names=true","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={{ $json.toJsonString() }}","options":{}},"id":"0af7dbaa-fcf8-4c54-8ec1-5af7e00f2e62","name":"Baserow Create Row","type":"n8n-nodes-base.httpRequest","position":[3140,680],"typeVersion":4.2},{"parameters":{"formTitle":"Baserow to n8n Form","formDescription":"This workflow creates an n8n form for a Baserow table.","formFields":{"values":[{"fieldLabel":"TableId","fieldType":"dropdown","fieldOptions":{"values":[{"option":"401709"}]},"requiredField":true}]},"options":{"path":"baserow-n8n-form"}},"id":"3b4d7067-08ce-4161-8395-5359c8a035c1","name":"On form submission1","type":"n8n-nodes-base.formTrigger","position":[760,680],"webhookId":"8ef4e5d9-5d92-4a3d-8d44-adf35a4bde3a","typeVersion":2.2},{"parameters":{"jsCode":"let results = [];\n\nconst fileInputs = $('Combine Fields1').first().json.data.filter(item => item.fieldType === 'file');\n\nif (!fileInputs.length) return [];\n\nconst { json, binary } = $('Render Form1').first();\n\nfor (fileInput of fileInputs) {\n  const binaryKeys = Object.keys(binary).filter(key => key.startsWith(fileInput.fieldLabel));\n  for (key of binaryKeys) {\n    results.push({\n      json: { fieldLabel: fileInput.fieldLabel },\n      binary: {\n          data: binary[key],\n      }\n    });\n  }\n}\n\nreturn results;"},"id":"14dec6f1-db9a-4aab-b250-57cbae146f56","name":"Files To List1","type":"n8n-nodes-base.code","position":[3480,680],"typeVersion":2},{"parameters":{"method":"POST","url":"https://api.baserow.io/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"id":"fc4829c1-7496-4882-8add-19c38c66fd5c","name":"Baserow Upload File","type":"n8n-nodes-base.httpRequest","position":[3660,680],"typeVersion":4.2},{"parameters":{"method":"PATCH","url":"=https://api.baserow.io/api/database/rows/table/{{ $('On form submission1').first().json.TableId }}/{{ $('Baserow Create Row').first().json.id }}/?user_field_names=true","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ $json.data.toJsonString() }}","options":{"lowercaseHeaders":false}},"id":"c52826eb-7b3e-4a00-9279-1162c2343bd6","name":"Baserow Update Row","type":"n8n-nodes-base.httpRequest","position":[4020,680],"executeOnce":false,"typeVersion":4.2},{"parameters":{"jsCode":"const pairs = $input.all().map((item, idx) => ({\n  field: $('Files To List1').itemMatching(idx).json.fieldLabel,\n  file: item.json,\n}));\n\nconst groups = {};\npairs.forEach(pair => {\n  if (!groups[pair.field]) groups[pair.field] = [];\n  groups[pair.field].push({\n    name: pair.file.name,\n    visible_name: pair.file.original_name\n  });\n});\n\nreturn { json: { data: groups } };"},"id":"6a6c3c47-5ec4-4913-89d5-aeb5eb7835e3","name":"Group By FieldName","type":"n8n-nodes-base.code","position":[3840,680],"typeVersion":2},{"parameters":{"method":"POST","url":"=https://content.airtable.com/v0/{{ $('On form submission').first().json.BaseId }}/{{ $('Airtable Create Record').first().json.id }}/{{ $json.fieldLabel }}/uploadAttachment","authentication":"predefinedCredentialType","nodeCredentialType":"airtableTokenApi","sendBody":true,"bodyParameters":{"parameters":[{"name":"contentType","value":"={{ $binary.data.mimeType }}"},{"name":"filename","value":"={{ $binary.data.fileName }}"},{"name":"file","value":"={{ $input.item.binary.data.data }}"}]},"options":{}},"id":"6d943d7d-8101-4f98-859d-5320603063d2","name":"Update Airtable Row","type":"n8n-nodes-base.httpRequest","position":[4020,380],"typeVersion":4.2},{"parameters":{"content":"## Try It Out!\n### This template is an example of how you could replace Airtable or Baserow forms with n8n forms. Though debateable whether this is actually useful, it is a cool demo of how someone would approach this if it every became a problem.\n\n## How it works\n* A form trigger is used to dynamically select a database/table from which to build the n8n form from.\n* the table's schema is imported into the workflow and using the code node, is converted into the n8n form fields schema.\n* This let's us dynamically build the fields in our n8n form when we choose to define the form using the JSON option.\n* Once the n8n form submits, we convert the values back into our table's API schema so that we can create a new row.\n* Note any files/attachments fields are removed as they need to be handled separately.\n* Files are processed separately as they may first need to be stored. Once complete, the reference is saved into the newly created row.\n\n\n**Check out the example Airtable here** - [https://airtable.com/appfP15Xd0aVZR9xV/shrGFgXLyQ4Jg58SU](https://airtable.com/appfP15Xd0aVZR9xV/shrGFgXLyQ4Jg58SU)\n\n\n⭐️ [**New to Airtable? Sign up here!**](https://airtable.com/invite/r/cKzxFYVc)\n\n## How to use\n* The n8n form is autogenerated which means you only need provide access to the table. Using this approach, this template can be reused for any number of Airtable and/or Baserow tables.\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!\n","height":834.0643999999993,"width":446.4999999999999},"id":"c82eba7b-2a88-491d-bd17-2e7ba76aa0a9","name":"Sticky Note","type":"n8n-nodes-base.stickyNote","position":[140,20],"typeVersion":1},{"parameters":{"content":"## 1. Get Table Schema\n\n**Airtable** schema returns all tables with extra metadata whereas **Baserow** has a dedicated list fields endpoint for each table. This means for **Airtable**, we need to filter out the table we want and split out its fields array.","height":675.625,"width":600.75,"color":7},"id":"c99f90b7-149b-4c63-b258-e5b93c280ed2","name":"Sticky Note1","type":"n8n-nodes-base.stickyNote","position":[1020,200],"typeVersion":1},{"parameters":{"content":"## 2. Convert To N8N Form Schema\n\nBoth products contain similar schema with only different field labels. This makes it quite simple to convert either to n8n's forms. JSON schema.","height":677.1875,"width":616.40625,"color":7},"id":"1893b7e1-60b4-417d-8e70-af9d9323def0","name":"Sticky Note2","type":"n8n-nodes-base.stickyNote","position":[1660,200],"typeVersion":1},{"parameters":{"content":"## 3. Render as N8N Form\n\nDid you know you can build forms dynamically from JSON? Well, you can! This flexibility makes working with n8n forms strategic because you can conditionally exclude fields which may not apply to the user or the context.","height":677.1875,"width":483.015625,"color":7},"id":"e20c060e-5406-42a4-8668-8b7d726bc590","name":"Sticky Note3","type":"n8n-nodes-base.stickyNote","position":[2280,200],"typeVersion":1},{"parameters":{"content":"## 4. Create New Row\n\nBoth **Airtable** and **Baserow** accept field labels as body param keys when using their API however, files and attachments are handled separately. Here we omit any file fields ","height":677.1875,"width":602.265625,"color":7},"id":"41c816b9-9f92-4544-bff0-3c806f5abfd4","name":"Sticky Note4","type":"n8n-nodes-base.stickyNote","position":[2780,200],"typeVersion":1},{"parameters":{"content":"## 5. Upload Files & Attachments\n\n**Baserow** requires a 2 step process where the file is first uploaded and the returning reference is used to update the row. **Airtable** API allows upload and update of the row in one operation. The **Airtable** upload API also seems to work in an append fashion - each call adds to the attachments array - but **Baserow** uses replace approach meaning you need to upload the files in one go.","height":677.1875,"width":824.3125,"color":7},"id":"eb4d3922-bee6-4599-97b8-75d472758822","name":"Sticky Note5","type":"n8n-nodes-base.stickyNote","position":[3400,200],"typeVersion":1},{"parameters":{"content":"### AirTable Example\n### 🚨 Change your Base ID and Table ID here!","height":99.50571162790695,"width":264.0997209302325,"color":5},"id":"12fb9adc-5cf0-44fa-9bf9-bf0319b37f71","name":"Sticky Note6","type":"n8n-nodes-base.stickyNote","position":[700,240],"typeVersion":1},{"parameters":{"content":"### BaseRow Example\n### 🚨 Change your TableId here!","height":80,"width":259.5844837209301,"color":5},"id":"af77ed06-4f1b-4ceb-a69b-fa1f21cb9659","name":"Sticky Note7","type":"n8n-nodes-base.stickyNote","position":[700,840],"typeVersion":1},{"parameters":{"mode":"runOnceForEachItem","jsCode":"const schema = $('Baserow List Fields').all().map(input => input.json);\nconst data = $input.item.json;\n\n// 1. filter out file inputs\nconst fileKeys = schema.filter(item => item.type === 'file').map(item => item.name);\n\nconst filteredData = Object.keys(data)\n  .filter(key => !fileKeys.includes(key))\n  .reduce((acc,key) => ({\n    ...acc,\n    [key]: data[key]\n  }), {});\n\n// 2. typecast for boolean\nconst booleanKeys = schema.filter(item => item.type === 'boolean').map(item => item.name);\n\nbooleanKeys.forEach(key => {\n  if (filteredData[key] !== undefined) filteredData[key] = Boolean(filteredData[key]);\n});\n\nreturn { json: filteredData }\n"},"id":"80d1cfe1-0e25-4b46-98e6-67f9e38fa406","name":"Prep Data for Insert1","type":"n8n-nodes-base.code","position":[2920,680],"typeVersion":2},{"parameters":{"mode":"runOnceForEachItem","jsCode":"const schema = $('Fields to List').all().map(input => input.json);\nconst data = $input.item.json;\n\n// 1. filter out file inputs\nconst fileKeys = schema.filter(item => item.type === 'multipleAttachments').map(item => item.name);\n\nconst filteredData = schema\n  .filter(field => !fileKeys.includes(field.name))\n  .reduce((acc,field) => ({\n    ...acc,\n    [field.name]: data[field.name]\n  }), {});\n\n// 2. typecast for boolean\nconst booleanKeys = schema.filter(item => item.type === 'checkbox').map(item => item.name);\n\nbooleanKeys.forEach(key => {\n  if (filteredData[key] !== undefined) filteredData[key] = Boolean(filteredData[key]);\n});\n\nreturn { json: filteredData }\n"},"id":"53b1bc07-0496-492b-9e5f-1e26c655d9c3","name":"Prep Data for Insert","type":"n8n-nodes-base.code","position":[2920,380],"typeVersion":2},{"parameters":{"operation":"create","base":{"__rl":true,"mode":"id","value":"={{ $('On form submission').first().json.BaseId }}"},"table":{"__rl":true,"mode":"id","value":"={{ $('On form submission').first().json.TableId }}"},"columns":{"value":{"Name":"={{ $json.Name }}","Email":"={{ $json.Email }}","Notes":"={{ $json.Notes }}","Mobile":"={{ $json.Mobile }}","Status":"={{ $json.Status }}","Website":"={{ $json.Website }}","Categories":"={{ $json.Categories }}","Is Special?":"={{ $json[\"Is Special?\"].isNotEmpty() }}","Target Date":"={{ $now.toISO() }}","Retry Attempts":"={{ $json[\"Retry Attempts\"] }}"},"schema":[{"id":"Name","type":"string","display":true,"removed":false,"readOnly":false,"required":false,"displayName":"Name","defaultMatch":false,"canBeUsedToMatch":true},{"id":"Notes","type":"string","display":true,"removed":false,"readOnly":false,"required":false,"displayName":"Notes","defaultMatch":false,"canBeUsedToMatch":true},{"id":"Status","type":"options","display":true,"options":[{"name":"Todo","value":"Todo"},{"name":"In progress","value":"In progress"},{"name":"Done","value":"Done"}],"removed":false,"readOnly":false,"required":false,"displayName":"Status","defaultMatch":false,"canBeUsedToMatch":true},{"id":"Categories","type":"array","display":true,"options":[{"name":"Finance","value":"Finance"},{"name":"Agriculture","value":"Agriculture"},{"name":"Business Management","value":"Business Management"},{"name":"Arts & Culture","value":"Arts & Culture"}],"removed":false,"readOnly":false,"required":false,"displayName":"Categories","defaultMatch":false,"canBeUsedToMatch":true},{"id":"Is Special?","type":"boolean","display":true,"removed":false,"readOnly":false,"required":false,"displayName":"Is Special?","defaultMatch":false,"canBeUsedToMatch":true},{"id":"Target Date","type":"dateTime","display":true,"removed":false,"readOnly":false,"required":false,"displayName":"Target Date","defaultMatch":false,"canBeUsedToMatch":true},{"id":"Mobile","type":"string","display":true,"removed":false,"readOnly":false,"required":false,"displayName":"Mobile","defaultMatch":false,"canBeUsedToMatch":true},{"id":"Email","type":"string","display":true,"removed":false,"readOnly":false,"required":false,"displayName":"Email","defaultMatch":false,"canBeUsedToMatch":true},{"id":"Website","type":"string","display":true,"removed":false,"readOnly":false,"required":false,"displayName":"Website","defaultMatch":false,"canBeUsedToMatch":true},{"id":"Retry Attempts","type":"number","display":true,"removed":false,"readOnly":false,"required":false,"displayName":"Retry Attempts","defaultMatch":false,"canBeUsedToMatch":true},{"id":"Attachments","type":"array","display":true,"removed":true,"readOnly":false,"required":false,"displayName":"Attachments","defaultMatch":false,"canBeUsedToMatch":true}],"mappingMode":"autoMapInputData","matchingColumns":[]},"options":{}},"id":"ec8ceeac-3735-450a-935d-8383a77f73ca","name":"Airtable Create Record","type":"n8n-nodes-base.airtable","position":[3140,380],"typeVersion":2.1},{"parameters":{"operation":"completion","completionTitle":"Submission Complete!","completionMessage":"Thanks for completing the form.","options":{}},"id":"63ab11b0-0e08-4d78-bba5-dcf4996a2b8b","name":"Show Completion!","type":"n8n-nodes-base.form","position":[4360,680],"webhookId":"ebf678ed-c9eb-4365-afd1-bfebe03955c6","executeOnce":true,"typeVersion":1},{"parameters":{"operation":"completion","completionTitle":"Submission Complete!","completionMessage":"Thanks for completing the form.","options":{}},"id":"84ced3fe-d004-4352-b182-0d6d20b46aa0","name":"Show Completion!1","type":"n8n-nodes-base.form","position":[4360,380],"webhookId":"ebf678ed-c9eb-4365-afd1-bfebe03955c6","executeOnce":true,"typeVersion":1}],"connections":{"Render Form":{"main":[[{"node":"Prep Data for Insert","type":"main","index":0}]]},"Filter Table":{"main":[[{"node":"Fields to List","type":"main","index":0}]]},"Render Form1":{"main":[[{"node":"Prep Data for Insert1","type":"main","index":0}]]},"Files To List":{"main":[[{"node":"Update Airtable Row","type":"main","index":0}]]},"Combine Fields":{"main":[[{"node":"Render Form","type":"main","index":0}]]},"Fields to List":{"main":[[{"node":"Covert to n8n Form Fields","type":"main","index":0}]]},"Files To List1":{"main":[[{"node":"Baserow Upload File","type":"main","index":0}]]},"Combine Fields1":{"main":[[{"node":"Render Form1","type":"main","index":0}]]},"Get Base Schema":{"main":[[{"node":"Filter Table","type":"main","index":0}]]},"Baserow Create Row":{"main":[[{"node":"Files To List1","type":"main","index":0}]]},"Baserow Update Row":{"main":[[{"node":"Show Completion!","type":"main","index":0}]]},"Group By FieldName":{"main":[[{"node":"Baserow Update Row","type":"main","index":0}]]},"On form submission":{"main":[[{"node":"Get Base Schema","type":"main","index":0}]]},"Baserow List Fields":{"main":[[{"node":"Covert to n8n Form Fields1","type":"main","index":0}]]},"Baserow Upload File":{"main":[[{"node":"Group By FieldName","type":"main","index":0}]]},"On form submission1":{"main":[[{"node":"Baserow List Fields","type":"main","index":0}]]},"Update Airtable Row":{"main":[[{"node":"Show Completion!1","type":"main","index":0}]]},"Prep Data for Insert":{"main":[[{"node":"Airtable Create Record","type":"main","index":0}]]},"Prep Data for Insert1":{"main":[[{"node":"Baserow Create Row","type":"main","index":0}]]},"Airtable Create Record":{"main":[[{"node":"Files To List","type":"main","index":0}]]},"Covert to n8n Form Fields":{"main":[[{"node":"Filter Unsupported FieldTypes","type":"main","index":0}]]},"Covert to n8n Form Fields1":{"main":[[{"node":"Filter Unsupported FieldTypes1","type":"main","index":0}]]},"Filter Unsupported FieldTypes":{"main":[[{"node":"Combine Fields","type":"main","index":0}]]},"Filter Unsupported FieldTypes1":{"main":[[{"node":"Combine Fields1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"9b36b2af-e5fd-4866-b3ad-6bede2e87ca6","triggerCount":0,"tags":[{"createdAt":"2025-02-12T00:06:31.183Z","updatedAt":"2025-02-16T12:09:52.918Z","id":"RAEtntqG5GvQKAMI","name":"AD USO INTERNO"},{"createdAt":"2025-02-11T23:59:41.483Z","updatedAt":"2025-02-14T16:18:26.979Z","id":"dzhL8PxGOvRSKz2J","name":"ANCORA IN TEST"}]}