{"createdAt":"2025-02-28T16:23:27.902Z","updatedAt":"2025-02-28T16:23:27.902Z","id":"U3zw5bGPvOU6VQy3","name":"strano flusso","active":false,"nodes":[{"parameters":{"operation":"pdf","binaryPropertyName":"invoice","options":{}},"id":"3ab3ee87-9001-419a-b0b8-4beea0113cb1","name":"Extract from File","type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[180,40]},{"parameters":{"model":{"__rl":true,"value":"gpt-3.5-turbo-instruct","mode":"list","cachedResultName":"gpt-3.5-turbo-instruct"},"options":{}},"id":"c4e6d4b3-b030-4f14-8eaa-9741bd685460","name":"OpenAI Model","type":"@n8n/n8n-nodes-langchain.lmOpenAi","typeVersion":1,"position":[400,240]},{"parameters":{"jsonSchema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"sender\": {\n      \"type\": \"string\"\n    },\n    \"invoiceDate\": {\n      \"type\": \"string\"\n    },\n    \"totalAmount\": {\n      \"type\": \"number\"\n    },\n    \"currency\": {\n      \"type\": \"string\"\n    },\n    \"description\": {\n      \"type\": \"string\"\n    },\n    \"category\": {\n      \"type\": \"string\"\n    }\n  }\n}"},"id":"bec97c2d-bb6f-43fb-9c9b-b2ccc82f615c","name":"Structured Output Parser","type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.1,"position":[580,240]},{"parameters":{"authentication":"oAuth2","resource":"expense","operation":"create","accountId":1748788,"projectId":"37618546","expenseCategoryId":"={{  $input.all().find(item => item.json.output.categoryID).json.output.categoryID }}","spentDate":"={{ $input.all().find(item => item.json.output.invoiceDate).json.output.invoiceDate }}","additionalFields":{"billable":false,"notes":"={{ $input.all().find(item => item.json.output.description2).json.output.description2 }}","total_cost":"={{ $input.all().find(items => items.json.output.currencyEUR).json.output.currencyEUR }}","units":"EUR"}},"id":"159a014e-b684-4174-95d4-ed1ccd43ce88","name":"Harvest","type":"n8n-nodes-base.harvest","typeVersion":1,"position":[2580,60]},{"parameters":{"url":"=https://openexchangerates.org/api/historical/{{ $json.output.invoiceDate }}.json","sendQuery":true,"queryParameters":{"parameters":[{"name":"app_id","value":"e686251dbd0d47a2be80a5cedeaa8069"}]},"options":{}},"id":"f03a7b77-83b7-4c54-8d6e-db0dc5b71482","name":"HTTP Request","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[780,160]},{"parameters":{},"id":"ebd17228-f981-4a13-bfc5-09ab55e514e6","name":"Merge","type":"n8n-nodes-base.merge","typeVersion":2.1,"position":[980,40]},{"parameters":{"jsCode":"=// find output node\nvar outputNode = null;\nvar rateUSDtoMXN = 0.0;\nvar rateUSDtoEUR = 0.0;\n\n// find output node\nfor (const item of $input.all()) {\n  if(item.json.hasOwnProperty('output')) {\n    outputNode = item;\n    break;\n  }\n}\n\n// find exchange rates\nfor (const item of $input.all()) {\n  // find node that has rates\n  if(item.json.hasOwnProperty('rates')) {\n    rateUSDtoMXN = item.json.rates.MXN;\n    rateUSDtoEUR = item.json.rates.EUR;\n  }\n}\n\n// write currency depending on source currency\nswitch (outputNode.json.output.currency) {\n  case 'USD':\n    outputNode.json.output.currencyUSD = outputNode.json.output.totalAmount;\n    outputNode.json.output.currencyMXN = outputNode.json.output.totalAmount * rateUSDtoMXN;\n    outputNode.json.output.currencyEUR = outputNode.json.output.totalAmount * rateUSDtoEUR;\n    outputNode.json.output.description2 = outputNode.json.output.sender + ': ' + outputNode.json.output.description + '. Invoice amount ' + outputNode.json.output.currencyUSD.toFixed(2) + 'USD (' + outputNode.json.output.currencyMXN.toFixed(2) + 'MXN)'\n    break;\n  case 'EUR':\n    outputNode.json.output.currencyUSD = outputNode.json.output.totalAmount / rateUSDtoEUR;\n    outputNode.json.output.currencyMXN = outputNode.json.output.currencyUSD * rateUSDtoMXN;\n    outputNode.json.output.currencyEUR = outputNode.json.output.totalAmount;\n    outputNode.json.output.description2 = outputNode.json.output.sender + ': ' + outputNode.json.output.description + '. Invoice amount ' + outputNode.json.output.currencyEUR.toFixed(2) + 'EUR (' + outputNode.json.output.currencyMXN.toFixed(2) + 'MXN)'\n    break;\n  case 'MXN':\n    outputNode.json.output.currencyUSD = outputNode.json.output.totalAmount / rateUSDtoMXN;\n    outputNode.json.output.currencyMXN = outputNode.json.output.totalAmount;\n    outputNode.json.output.currencyEUR = outputNode.json.output.currencyUSD * rateUSDtoEUR;\n    outputNode.json.output.description2 = outputNode.json.output.sender + ': ' + outputNode.json.output.description + '. Invoice amount ' + outputNode.json.output.currencyMXN.toFixed(2) + 'MXN'\n    break;\n}\n\n// Add category ID\nswitch (outputNode.json.output.category.toLowerCase()) {\n  case 'administration':\n    outputNode.json.output.categoryID = 9795727;\n    break;\n  case 'banking':\n    outputNode.json.output.categoryID = 9795729;\n    break;\n  case 'hosting':\n    outputNode.json.output.categoryID = 9795730;\n    break;\n  case 'office':\n    outputNode.json.output.categoryID = 9795731;\n    break;\n  case 'office hardware':\n    outputNode.json.output.categoryID = 10252343;\n    break;\n  case 'other':\n    outputNode.json.output.categoryID = 9734794;\n    break;\n  case 'insurance':\n    outputNode.json.output.categoryID = 9795734;\n    break;\n  case 'software':\n    outputNode.json.output.categoryID = 9795732;\n    break;\n  case 'telephone':\n  case 'internet':\n    outputNode.json.output.categoryID = 9795733;\n    break;\n  default:\n    outputNode.json.output.categoryID = 9734794; // Other\n}\n      \nreturn outputNode;"},"id":"649d825e-534d-4d74-a900-e3300e3e9fc4","name":"Code","type":"n8n-nodes-base.code","typeVersion":2,"position":[1160,40]},{"parameters":{},"id":"f47d23ff-f4cc-4a44-940e-89975c1714bd","name":"Merge1","type":"n8n-nodes-base.merge","typeVersion":2.1,"position":[2780,-60]},{"parameters":{"aggregate":"aggregateAllItemData","options":{"includeBinaries":true}},"id":"9973f92b-a493-40d9-a25b-14bd6b635d86","name":"Aggregate","type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[3280,-60]},{"parameters":{"method":"PATCH","url":"=https://api.harvestapp.com/v2/expenses/{{ $input.last().json.data.last().id }}","authentication":"predefinedCredentialType","nodeCredentialType":"harvestOAuth2Api","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Harvest-Account-Id","value":"1748788"},{"name":"User-Agent","value":"N8N (jeroen@byqloud.com)"}]},"sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"receipt","inputDataFieldName":"invoice"}]},"options":{"response":{"response":{"fullResponse":true}}}},"id":"0f956913-976b-4920-bd66-3bd38d8e10cb","name":"HTTP Request - Add receipt","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[3500,-60]},{"parameters":{"content":"### note\nWithout the Aggregate node, the binary cannot be found. No idea why...","height":146.18573099415212,"width":174.89715399610134},"id":"42b607b7-5d1e-4f0e-9e59-fad5fd736654","name":"Sticky Note1","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[3260,100]},{"parameters":{"events":["activate"]},"id":"94571c42-86de-458b-9da4-f5280bad37f6","name":"Workflow Trigger","type":"n8n-nodes-base.workflowTrigger","typeVersion":1,"position":[-280,20]},{"parameters":{},"id":"001a7041-2c6e-4ecf-bcee-0b2e06a97e84","name":"When clicking \"Test workflow\"","type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-280,-180]},{"parameters":{"jsCode":"var exists = false;\n\nfor (let i = 1; i< items.length; i++) {\n  exists = items[i].json.notes.startsWith(items[0].json.output.sender) && items[i].json.total_cost == items[0].json.output.currencyEUR.toFixed(2);\n  if (exists)\n    return [ {success: \"Expense record already exists.\"}];\n}\n\n//items.push( { json: { exists: exists }} );\n\nreturn items[0];"},"id":"34f6e372-2b6c-4801-93af-fca22947b389","name":"Check if incoming invoice already exists","type":"n8n-nodes-base.code","typeVersion":2,"position":[2080,240]},{"parameters":{},"id":"5fe0f233-ed35-4d41-9fb5-2ee249530770","name":"Merge2","type":"n8n-nodes-base.merge","typeVersion":2.1,"position":[1860,240]},{"parameters":{"authentication":"oAuth2","resource":"expense","accountId":1748788,"filters":{"from":"={{ $input.item.json.output.invoiceDate }}","to":"={{ $input.item.json.output.invoiceDate }}"}},"id":"9bdc6a58-9418-4d2c-a4be-fff25df2e6f0","name":"Harvest - Get existing expense","type":"n8n-nodes-base.harvest","typeVersion":1,"position":[1640,340]},{"parameters":{"jsCode":"// Cancel operation if merge did not receive both objects\nif($input.all().length < 2)\n  return [];\n\nreturn $input.all();"},"id":"609f041d-ec53-4ba4-9def-3a65167bce48","name":"Check if merge received both objects. If not, cancel without error","type":"n8n-nodes-base.code","typeVersion":2,"position":[3000,-60]},{"parameters":{"jsCode":"// Stop execution if no binary is given\nif(!Object.hasOwn(items[0], 'binary') || items[0].binary == null)\n  return [];\n \nreturn items;\n"},"id":"0cb89cd1-d511-4943-a37c-ca2f7be60fe4","name":"Check if input has binary","type":"n8n-nodes-base.code","typeVersion":2,"position":[-60,-80]},{"parameters":{"promptType":"define","text":"=The following text is from an invoice. From that invoice, can you abstract the company who sent the invoice, invoice date in format YYYY-MM-DD, total amount paid without currency symbol, used currency in 3 letter code, and an optional short description?\n\nCan you categorize this invoice in one of the following categories:\nAdministration, Banking, Hosting, Office, Office hardware, Insurance, Software, Telephone, Internet, Other.\n\n{{ $json.text.substring(0,2000); }}\n","hasOutputParser":true},"id":"0a274109-fe7a-4458-bc81-2a961584a6d7","name":"Basic LLM Chain","type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.4,"position":[400,40]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict"},"conditions":[{"id":"265ba66b-8a9d-45c2-b672-4504c211c559","leftValue":"={{ Object.hasOwn($input.first().json, 'success') }}","rightValue":0,"operator":{"type":"boolean","operation":"false","singleValue":true}}],"combinator":"and"},"options":{}},"id":"6e061e69-3aa1-4d44-ae07-690c5af0c061","name":"If","type":"n8n-nodes-base.if","typeVersion":2,"position":[2300,240]},{"parameters":{"jsCode":"\nif(Object.hasOwn($input.first().json, 'statusCode')) {\n  if($input.first().json.statusCode == 200) {\n    return [{ success: \"Invoice added successfully\" }]\n  }\n  else {\n    return [{error: $input.first().json.statusMessage}]\n  }\n}\n\nif(Object.hasOwn($input.first().json, 'success') ||\n   Object.hasOwn($input.first().json, 'error')) {\n  return $input.first();\n}\n\nreturn [{error: 'unknown error occurred'}];"},"id":"03237b29-f9c8-465b-871b-d9e435bfe7db","name":"Create result","type":"n8n-nodes-base.code","typeVersion":2,"position":[3720,-60]},{"parameters":{},"id":"ad8ce4f3-d5ec-4e62-a67c-bd17a7dee213","name":"No Operation, do nothing","type":"n8n-nodes-base.noOp","typeVersion":1,"position":[3980,260]}],"connections":{"Extract from File":{"main":[[{"node":"Basic LLM Chain","type":"main","index":0}]]},"OpenAI Model":{"ai_languageModel":[[{"node":"Basic LLM Chain","type":"ai_languageModel","index":0}]]},"Structured Output Parser":{"ai_outputParser":[[{"node":"Basic LLM Chain","type":"ai_outputParser","index":0}]]},"Harvest":{"main":[[{"node":"Merge1","type":"main","index":1}]]},"HTTP Request":{"main":[[{"node":"Merge","type":"main","index":1}]]},"Merge":{"main":[[{"node":"Code","type":"main","index":0}]]},"Code":{"main":[[{"node":"Harvest - Get existing expense","type":"main","index":0},{"node":"Merge2","type":"main","index":0}]]},"Merge1":{"main":[[{"node":"Check if merge received both objects. If not, cancel without error","type":"main","index":0}]]},"Aggregate":{"main":[[{"node":"HTTP Request - Add receipt","type":"main","index":0}]]},"HTTP Request - Add receipt":{"main":[[{"node":"Create result","type":"main","index":0}]]},"Workflow Trigger":{"main":[[{"node":"Check if input has binary","type":"main","index":0}]]},"When clicking \"Test workflow\"":{"main":[[{"node":"Check if input has binary","type":"main","index":0}]]},"Check if incoming invoice already exists":{"main":[[{"node":"If","type":"main","index":0}]]},"Merge2":{"main":[[{"node":"Check if incoming invoice already exists","type":"main","index":0}]]},"Harvest - Get existing expense":{"main":[[{"node":"Merge2","type":"main","index":1}]]},"Check if merge received both objects. If not, cancel without error":{"main":[[{"node":"Aggregate","type":"main","index":0}]]},"Check if input has binary":{"main":[[{"node":"Extract from File","type":"main","index":0},{"node":"Merge1","type":"main","index":0}]]},"Basic LLM Chain":{"main":[[{"node":"HTTP Request","type":"main","index":0},{"node":"Merge","type":"main","index":0}]]},"If":{"main":[[{"node":"Harvest","type":"main","index":0}],[{"node":"No Operation, do nothing","type":"main","index":0}]]},"Create result":{"main":[[{"node":"No Operation, do nothing","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"1f59d315-aff7-4dca-a547-44f8c1515701","triggerCount":0,"tags":[]}