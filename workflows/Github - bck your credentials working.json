{"createdAt":"2025-02-24T14:32:34.410Z","updatedAt":"2025-03-03T14:18:31.000Z","id":"A02oFL0mcr8ZtAhx","name":"Github - bck your credentials working","active":true,"nodes":[{"parameters":{},"id":"73dd6326-7c94-4dc6-afc5-6a7470a1c384","name":"On clicking 'execute'","type":"n8n-nodes-base.manualTrigger","position":[140,200],"typeVersion":1},{"parameters":{"content":"## Subworkflow","height":750.8363163824032,"width":2086.845881354743,"color":6},"id":"c80f0cab-2acc-4d9a-8779-5f89667d9513","name":"Sticky Note","type":"n8n-nodes-base.stickyNote","position":[-300,580],"typeVersion":1},{"parameters":{"assignments":{"assignments":[{"id":"8d513345-6484-431f-afb7-7cf045c90f4f","name":"Done","type":"boolean","value":true}]},"options":{}},"id":"9d8f8ee4-f72c-40f9-849d-97b01f8c6e87","name":"Return","type":"n8n-nodes-base.set","position":[2040,460],"typeVersion":3.3},{"parameters":{"url":"={{ $json.download_url }}","options":{}},"id":"bd0c48da-8ea2-4007-af76-a9e49dd22cf2","name":"Get File","type":"n8n-nodes-base.httpRequest","position":[680,660],"typeVersion":4.2},{"parameters":{"conditions":{"options":{"version":1,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"45ce825e-9fa6-430c-8931-9aaf22c42585","operator":{"type":"string","operation":"empty","singleValue":true},"leftValue":"={{ $json.content }}","rightValue":""},{"id":"9619a55f-7fb1-4f24-b1a7-7aeb82365806","operator":{"type":"string","operation":"notExists","singleValue":true},"leftValue":"={{ $json.error }}","rightValue":""}]},"options":{}},"id":"85050864-c629-4d57-9a3b-defc087af610","name":"If file too large","type":"n8n-nodes-base.if","position":[480,680],"typeVersion":2},{"parameters":{},"id":"53324378-ce80-4a3e-b640-f5702512bf2a","name":"Merge Items","type":"n8n-nodes-base.merge","position":[480,940],"typeVersion":2},{"parameters":{"jsCode":"const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();"},"id":"d47bfc7c-0330-48fc-a52d-bd1d3cf8a8d0","name":"isDiffOrNew","type":"n8n-nodes-base.code","position":[680,940],"typeVersion":1},{"parameters":{"dataType":"string","value1":"={{$json.github_status}}","rules":{"rules":[{"value2":"same"},{"value2":"different","output":1},{"value2":"new","output":2}]}},"id":"953ef714-a17a-484d-bbda-7e1bdbe2107e","name":"Check Status","type":"n8n-nodes-base.switch","position":[900,940],"typeVersion":1},{"parameters":{},"id":"fbbac285-f8c1-4854-88d1-e10be4c3b55e","name":"Same file - Do nothing","type":"n8n-nodes-base.noOp","position":[1120,780],"typeVersion":1},{"parameters":{},"id":"e9839d7d-3bc3-4abc-8dd2-ac94bc0ecd67","name":"File is different","type":"n8n-nodes-base.noOp","position":[1120,940],"typeVersion":1},{"parameters":{},"id":"1ac6430b-f8c3-48ca-adf6-b0539dae7b61","name":"File is new","type":"n8n-nodes-base.noOp","position":[1120,1100],"typeVersion":1},{"parameters":{"resource":"file","owner":{"__rl":true,"mode":"name","value":"={{ $('Globals').item.json.repo.owner }}"},"repository":{"__rl":true,"mode":"name","value":"={{ $('Globals').item.json.repo.name }}"},"filePath":"={{ $('Globals').item.json.repo.path }}{{ $('JSON formatting').item.json.id }}.json","fileContent":"={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}","commitMessage":"={{ $('No Operation, do nothing1').item.json.name }} ({{$json.github_status}})"},"id":"8ec5be3a-fad1-4cc6-8e8a-07b6716a8c90","name":"Create new file","type":"n8n-nodes-base.github","position":[1340,1100],"typeVersion":1,"credentials":{"githubApi":{"id":"d8Aca1Kz6HhErvT5","name":"GitHub account"}}},{"parameters":{"resource":"file","operation":"edit","owner":{"__rl":true,"mode":"name","value":"={{ $('Globals').item.json.repo.owner }}"},"repository":{"__rl":true,"mode":"name","value":"={{ $('Globals').item.json.repo.name }}"},"filePath":"={{ $json.repo.path }}{{ $('JSON formatting').item.json.id }}.json","fileContent":"={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}","commitMessage":"={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"},"id":"538979ab-3caa-43e1-bb34-d5aab0fd272c","name":"Edit existing file","type":"n8n-nodes-base.github","position":[1340,920],"typeVersion":1,"credentials":{"githubApi":{"id":"d8Aca1Kz6HhErvT5","name":"GitHub account"}}},{"parameters":{"options":{}},"id":"6c217bcf-d943-4690-897c-532a4ba85b1d","name":"Loop Over Items","type":"n8n-nodes-base.splitInBatches","position":[740,300],"typeVersion":3},{"parameters":{"rule":{"interval":[{"triggerAtHour":12,"triggerAtMinute":15}]}},"id":"8ba117cf-1180-4bb3-9485-0674a937ec99","name":"Schedule Trigger","type":"n8n-nodes-base.scheduleTrigger","position":[140,400],"typeVersion":1.2},{"parameters":{"content":"## Backup to GitHub \nThis workflow will backup all instance credentials to GitHub.\n\nThe files are saved `ID.json` for the filename.\n\n### Setup\nOpen `Globals` node and update the values below ðŸ‘‡\n\n- **repo.owner:** your Github username\n- **repo.name:** the name of your repository\n- **repo.path:** the folder to use within the repository. If it doesn't exist it will be created.\n\n\nIf your username was `john-doe` and your repository was called `n8n-backups` and you wanted the credentials to go into a `credentials` folder you would set:\n\n- repo.owner - john-doe\n- repo.name - n8n-backups\n- repo.path - credentials/\n\n\nThe workflow calls itself using a subworkflow, to help reduce memory usage.","height":596.4810912485963,"width":365.19481715599653,"color":4},"id":"ca854352-ff22-4841-a8a5-f215cb0ab46c","name":"Sticky Note1","type":"n8n-nodes-base.stickyNote","position":[-300,-60],"typeVersion":1},{"parameters":{"content":"## Main workflow loop","height":434.88564057365943,"width":1028.7522287279464,"color":7},"id":"8a1e2f1a-7fef-4181-9411-13c6347fb014","name":"Sticky Note2","type":"n8n-nodes-base.stickyNote","position":[100,120],"typeVersion":1},{"parameters":{"resource":"file","operation":"get","owner":{"__rl":true,"mode":"name","value":"={{ $json.repo.owner }}"},"repository":{"__rl":true,"mode":"name","value":"={{ $json.repo.name }}"},"filePath":"={{ $json.repo.path }}{{ $('JSON formatting').item.json.id }}.json","asBinaryProperty":false,"additionalParameters":{}},"id":"de2d349f-c2e1-4286-af1b-2ff52a6855b2","name":"Get file data","type":"n8n-nodes-base.github","position":[280,680],"typeVersion":1,"alwaysOutputData":true,"credentials":{"githubApi":{"id":"d8Aca1Kz6HhErvT5","name":"GitHub account"}},"continueOnFail":true},{"parameters":{"assignments":{"assignments":[{"id":"6cf546c5-5737-4dbd-851b-17d68e0a3780","name":"repo.owner","type":"string","value":"Fabnicklaus"},{"id":"452efa28-2dc6-4ea3-a7a2-c35d100d0382","name":"repo.name","type":"string","value":"n8n-bck"},{"id":"81c4dc54-86bf-4432-a23f-22c7ea831e74","name":"repo.path","type":"string","value":"credentials/"}]},"options":{}},"id":"5a307369-f53a-402f-849a-94dc486fa4b3","name":"Globals","type":"n8n-nodes-base.set","position":[80,840],"typeVersion":3.4},{"parameters":{"command":"npx n8n export:credentials --all --decrypted"},"id":"188453f1-eab6-446b-8ed1-02365d694ff6","name":"Execute Command","type":"n8n-nodes-base.executeCommand","position":[360,300],"typeVersion":1},{"parameters":{"jsCode":"// Function to beautify JSON\nfunction beautifyJson(jsonString) {\n  try {\n    // Parse the JSON string\n    const jsonObject = JSON.parse(jsonString);\n\n    // Format the JSON with indentation\n    return jsonObject; // Return the parsed object directly\n  } catch (error) {\n    // Return the error message if JSON is invalid\n    return `Invalid JSON: ${error.message}`;\n  }\n}\n\n// Retrieve the JSON object from the input data\nconst input = $input.all()[0].json;\n\n// Extract the JSON string from the stdout field\nconst jsonString = input.stdout.match(/\\[{.*}\\]/s);\n\n// Check if a valid JSON string is found\nif (!jsonString) {\n  return {\n    json: {\n      error: \"No valid JSON string found in stdout.\"\n    }\n  };\n}\n\n// Beautify the JSON\nconst beautifiedJson = beautifyJson(jsonString[0]);\n\n// Output the beautified JSON, ensuring each entry is in an object with a 'json' key\nconst output = beautifiedJson.map(entry => ({ json: entry }));\n\n// Return the output\nreturn output;\n"},"id":"29b76010-1ecc-40e4-be79-b857a7693c8b","name":"JSON formatting","type":"n8n-nodes-base.code","position":[540,300],"typeVersion":2},{"parameters":{"content":"## Edit this node ðŸ‘‡","height":80,"width":150,"color":4},"id":"8d1fc729-0293-4146-b238-f6e33c98c110","name":"Sticky Note3","type":"n8n-nodes-base.stickyNote","position":[40,740],"typeVersion":1},{"parameters":{"workflowId":"={{ $workflow.id }}","mode":"each","options":{}},"id":"ae3adf03-0177-4845-8810-6322e126cca9","name":"Execute Workflow","type":"n8n-nodes-base.executeWorkflow","position":[1220,320],"typeVersion":1,"disabled":true},{"parameters":{},"type":"n8n-nodes-base.noOp","typeVersion":1,"position":[-140,960],"id":"09041b68-d347-4cdb-a7af-934031e5a08b","name":"No Operation, do nothing"},{"parameters":{},"type":"n8n-nodes-base.noOp","typeVersion":1,"position":[1520,320],"id":"1d001291-04f1-4a2e-87aa-1feaeabc5971","name":"No Operation, do nothing1"},{"parameters":{},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[-480,960],"id":"9b08c635-836e-4bc9-8909-a1eaccb6cd89","name":"When Executed by Another Workflow","disabled":true}],"connections":{"Globals":{"main":[[{"node":"Get file data","type":"main","index":0},{"node":"Merge Items","type":"main","index":1}]]},"Get File":{"main":[[{"node":"Merge Items","type":"main","index":0}]]},"File is new":{"main":[[{"node":"Create new file","type":"main","index":0}]]},"Merge Items":{"main":[[{"node":"isDiffOrNew","type":"main","index":0}]]},"isDiffOrNew":{"main":[[{"node":"Check Status","type":"main","index":0}]]},"Check Status":{"main":[[{"node":"Same file - Do nothing","type":"main","index":0}],[{"node":"File is different","type":"main","index":0}],[{"node":"File is new","type":"main","index":0}]]},"Get file data":{"main":[[{"node":"If file too large","type":"main","index":0}]]},"Create new file":{"main":[[{"node":"Return","type":"main","index":0}]]},"Execute Command":{"main":[[{"node":"JSON formatting","type":"main","index":0}]]},"JSON formatting":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Loop Over Items":{"main":[[],[{"node":"Execute Workflow","type":"main","index":0}]]},"Execute Workflow":{"main":[[{"node":"No Operation, do nothing1","type":"main","index":0}]]},"Schedule Trigger":{"main":[[{"node":"Execute Command","type":"main","index":0}]]},"File is different":{"main":[[{"node":"Edit existing file","type":"main","index":0}]]},"If file too large":{"main":[[{"node":"Get File","type":"main","index":0}],[{"node":"Merge Items","type":"main","index":0}]]},"Edit existing file":{"main":[[{"node":"Return","type":"main","index":0}]]},"On clicking 'execute'":{"main":[[{"node":"Execute Command","type":"main","index":0}]]},"Same file - Do nothing":{"main":[[{"node":"Return","type":"main","index":0}]]},"No Operation, do nothing":{"main":[[{"node":"Globals","type":"main","index":0}]]},"Return":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"No Operation, do nothing1":{"main":[[{"node":"No Operation, do nothing","type":"main","index":0}]]},"When Executed by Another Workflow":{"main":[[{"node":"No Operation, do nothing","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":{"node:Schedule Trigger":{"recurrenceRules":[]}},"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"f023c2f1-b43f-4adc-a6a8-ef89dbba96ac","triggerCount":1,"tags":[{"createdAt":"2025-02-12T00:06:31.183Z","updatedAt":"2025-02-16T12:09:52.918Z","id":"RAEtntqG5GvQKAMI","name":"AD USO INTERNO"},{"createdAt":"2025-02-17T23:26:27.504Z","updatedAt":"2025-02-19T15:58:40.522Z","id":"tL7B60od2zY9lf8X","name":"IN PRODUZIONE!"}]}